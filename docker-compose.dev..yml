services:

  postgres_service:
    image: postgres:latest
    environment:  
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 30s
      retries: 5
    env_file: .env.dev


  redis_service:
    image: redis:latest
    env_file: .env.dev


  api:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    
    environment:
      PG_DATABASE: ${POSTGRES_DB}
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_HOST: postgres_service
      PG_PORT: ${POSTGRES_PORT}

      REDIS_HOST: redis_service
      REDIS_PORT: ${REDIS_PORT}
    
    volumes:
      - ./server:/server
    depends_on:
      postgres_service:
        condition: service_healthy
    env_file: .env.dev
    
      
      
      
  
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.dev
    environment:
      REDIS_HOST: redis_service
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ./worker:/worker
      - /worker/node_modules
    env_file: .env.dev
  
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    volumes:
      - ./client:/client
      - /client/node_modules
    environment:
      WDS_SOCKET_PORT: 0

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    restart: always

    ports:
      - "7000:80"
    depends_on:
      - client
      - api
    env_file: .env.dev




volumes:
  pg_volume:

