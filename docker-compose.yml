services:

  postgres_service:
    image: postgres:latest
    environment:  
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 5
  


  redis_service:
    image: redis:latest


  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    
    environment:
      PG_DATABASE: ${POSTGRES_DB}
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_HOST: postgres_service
      PG_PORT: ${POSTGRES_PORT}

      REDIS_HOST: redis_service
      REDIS_PORT: ${REDIS_PORT}
      
      SECRET_KEY: ${SECRET_KEY}
      SERVER_HOST: nginx
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}


    
    volumes:
      - "static_volume:/server/static"
      - "media_volume:/server/media"
    depends_on:
      postgres_service:
        condition: service_healthy
    
      
      
      
  
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      REDIS_HOST: redis_service
      REDIS_PORT: ${REDIS_PORT}
  
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      WDS_SOCKET_PORT: 0
    ports:
      - "3000:3000"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - "7000:80"
    depends_on:
      - client
      - api
    volumes:
      - "static_volume:/server/static"
      - "media_volume:/server/media"
 


volumes:
  pg_volume:
  static_volume:
  media_volume:

